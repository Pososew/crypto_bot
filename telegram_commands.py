import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import (
    TELEGRAM_TOKEN,
    get_balance, set_balance,
    get_signals_history, get_trades_history,
    save_trade, enable_signals,
    load_positions, save_positions, calc_sl_tp
)
from binance.client import Client
import pandas as pd
import ta

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_trade_mode = {}         # –î–ª—è —Å–¥–µ–ª–æ–∫ (–ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫)
position_creation = {}       # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RSI –¥–ª—è –º–æ–Ω–µ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π)
def get_rsi_for_coin(coin):
    from config import API_KEY, API_SECRET
    client = Client(API_KEY, API_SECRET)
    candles = client.get_klines(symbol=coin, interval="1m", limit=100)
    df = pd.DataFrame(candles, columns=[
        'timestamp','open','high','low','close','volume','close_time',
        'quote_asset_volume','number_of_trades','taker_buy_base_volume',
        'taker_buy_quote_volume','ignore'
    ])
    df['close'] = pd.to_numeric(df['close'])
    rsi = ta.momentum.RSIIndicator(df['close'], window=14).rsi().iloc[-1]
    return rsi

async def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    enable_signals()  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
    instructions = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        " ‚Ä¢ üöÄ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å' ‚Äì –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT.\n"
        " ‚Ä¢ üí∞ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å' ‚Äì —É–∑–Ω–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.\n"
        " ‚Ä¢ üìä '–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤' ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤.\n"
        " ‚Ä¢ üìú '–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫' ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫.\n"
        " ‚Ä¢ ‚úÖ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É' –∏–ª–∏ ‚ùå '–î–æ–±–∞–≤–∏—Ç—å —É–±—ã—Ç–æ—á–Ω—É—é —Å–¥–µ–ª–∫—É' ‚Äì –æ–±–Ω–æ–≤–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å–¥–µ–ª–∫–æ–π.\n"
        " ‚Ä¢ ‚ûï '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é' ‚Äì —Å–æ–æ–±—â–∏—Ç–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É (–º–æ–Ω–µ—Ç–∞, BUY/SELL, –ø–ª–µ—á–æ, —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞).\n"
        " ‚Ä¢ üìà '–ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏' ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞.\n"
        " ‚Ä¢ ‚ùå '–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é' ‚Äì —É–¥–∞–ª–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É.\n\n"
        "–°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º, —É–¥–∞—á–∏!"
    )
    keyboard = [
        ["üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å"],
        ["üìä –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤", "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"],
        ["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É", "‚ùå –î–æ–±–∞–≤–∏—Ç—å —É–±—ã—Ç–æ—á–Ω—É—é —Å–¥–µ–ª–∫—É"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", "üìà –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏"],
        ["‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(instructions, reply_markup=reply_markup)

async def ask_balance(update: Update, context: CallbackContext):
    context.user_data["awaiting_balance"] = True
    await update.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–≤ USDT):")

async def set_user_balance(update: Update, context: CallbackContext):
    try:
        amount = float(update.message.text)
        set_balance(amount)
        context.user_data["awaiting_balance"] = False
        await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount:.2f} USDT")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

async def show_balance(update: Update, context: CallbackContext):
    balance = get_balance()
    if balance is not None:
        await update.message.reply_text(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def show_signals(update: Update, context: CallbackContext):
    history = get_signals_history()
    await update.message.reply_text(f"üìä –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:\n{history}")

async def show_trades(update: Update, context: CallbackContext):
    history = get_trades_history()
    await update.message.reply_text(f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n{history}")

async def ask_trade(update: Update, context: CallbackContext):
    global user_trade_mode
    chat_id = update.message.chat_id
    text = update.message.text.lower()
    if "–ø—Ä–∏–±—ã" in text:
        user_trade_mode[chat_id] = "profit"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏–±—ã–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):")
    elif "—É–±—ã—Ç" in text:
        user_trade_mode[chat_id] = "loss"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —É–±—ã—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30):")

async def save_user_trade(update: Update, context: CallbackContext):
    global user_trade_mode
    chat_id = update.message.chat_id
    if chat_id not in user_trade_mode:
        return
    try:
        trade_amount = float(update.message.text.strip())
        current_balance = get_balance()
        if current_balance is None:
            await update.message.reply_text("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            del user_trade_mode[chat_id]
            return
        if user_trade_mode[chat_id] == "profit":
            new_balance = current_balance + trade_amount
            trade_type = "–ü–†–ò–ë–´–õ–¨"
        else:
            new_balance = current_balance - trade_amount
            trade_type = "–£–ë–´–¢–û–ö"
        save_trade(f"{trade_type}: {trade_amount:.2f} USDT")
        set_balance(new_balance)
        del user_trade_mode[chat_id]
        await update.message.reply_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {trade_type} {trade_amount:.2f} USDT\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} USDT"
        )
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

# ==== –†–∞–±–æ—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ ====
position_creation = {}

async def add_position(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    chat_id = update.message.chat_id
    position_creation[chat_id] = {"step": 1}
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT):")

async def set_position_coin(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (BUY/SELL) –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    chat_id = update.message.chat_id
    if chat_id not in position_creation:
        return
    position_creation[chat_id]["coin"] = update.message.text.strip().upper()
    position_creation[chat_id]["step"] = 2
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (BUY –∏–ª–∏ SELL):")

async def set_position_side(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    chat_id = update.message.chat_id
    if chat_id not in position_creation:
        return
    side = update.message.text.strip().upper()
    if side not in ["BUY", "SELL"]:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ BUY –∏–ª–∏ SELL!")
        return
    position_creation[chat_id]["side"] = side
    position_creation[chat_id]["step"] = 3
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (0 –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è, –∏–ª–∏ 2, 3, 5, 10):")

async def set_position_leverage(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–ª–µ—á–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"""
    chat_id = update.message.chat_id
    if chat_id not in position_creation:
        return
    try:
        leverage = float(update.message.text.strip())
        allowed_leverages = [0, 2, 3, 5, 10]
        if leverage not in allowed_leverages:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ (0, 2, 3, 5, 10):")
            return
        position_creation[chat_id]["leverage"] = leverage
        position_creation[chat_id]["step"] = 4
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–µ—á–∞!")

async def set_position_entry(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç SL/TP"""
    from config import load_positions, save_positions
    chat_id = update.message.chat_id
    if chat_id not in position_creation:
        return
    try:
        entry_price = float(update.message.text)
        coin = position_creation[chat_id]["coin"]
        side = position_creation[chat_id]["side"]
        leverage = position_creation[chat_id].get("leverage", 0)
        stop_loss, take_profit = calc_sl_tp(side, entry_price)
        positions = load_positions()
        new_pos = {
            "coin": coin,
            "side": side,
            "entry": entry_price,
            "stop_loss": stop_loss,
            "take_profit": take_profit,
            "leverage": leverage
        }
        positions.append(new_pos)
        save_positions(positions)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n–ú–æ–Ω–µ—Ç–∞: {coin}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side}\n–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}\n"
            f"–ü–ª–µ—á–æ: {leverage}x\n–°—Ç–æ–ø‚Äë–ª–æ—Å—Å: {stop_loss:.2f}\n–¢–µ–π–∫‚Äë–ø—Ä–æ—Ñ–∏—Ç: {take_profit:.2f}"
        )
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞!")
    del position_creation[chat_id]

async def show_positions(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∑–∞–∫—Ä—ã—Ç—å, –µ—Å–ª–∏ RSI —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç"""
    from config import load_positions
    positions = load_positions()
    if not positions:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
        return
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    from config import API_KEY, API_SECRET
    from binance.client import Client
    client = Client(API_KEY, API_SECRET)
    msg = "üìà –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏:\n"
    for i, pos in enumerate(positions, start=1):
        coin = pos["coin"]
        side = pos["side"].upper()
        entry = pos["entry"]
        try:
            ticker = client.get_symbol_ticker(symbol=coin)
            current_price = float(ticker["price"])
        except Exception as e:
            msg += f"{i}. {coin}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã\n"
            continue
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        if side == "BUY":
            percent_change = ((current_price - entry) / entry) * 100
        else:  # SELL
            percent_change = ((entry - current_price) / entry) * 100

        # –î–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—É—á–∏–º RSI –¥–ª—è –º–æ–Ω–µ—Ç—ã
        def get_rsi_for_coin(coin):
            from binance.client import Client
            from config import API_KEY, API_SECRET
            client = Client(API_KEY, API_SECRET)
            candles = client.get_klines(symbol=coin, interval="1m", limit=100)
            import pandas as pd
            import ta
            df = pd.DataFrame(candles, columns=[
                'timestamp','open','high','low','close','volume',
                'close_time','quote_asset_volume','number_of_trades',
                'taker_buy_base_volume','taker_buy_quote_volume','ignore'
            ])
            df['close'] = pd.to_numeric(df['close'])
            rsi = ta.momentum.RSIIndicator(df['close'], window=14).rsi().iloc[-1]
            return rsi

        rsi = get_rsi_for_coin(coin)
        recommendation = ""
        if side == "BUY" and rsi < 20:
            recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É (RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)."
        elif side == "SELL" and rsi > 80:
            recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É (RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω)."
        status = f"{percent_change:+.1f}%"
        msg += (
            f"{i}. {coin} ({side})\n"
            f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry:.2f}\n"
            f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n"
            f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –≤—Ö–æ–¥–∞: {status}\n"
            f"   (–ü–ª–µ—á–æ: {pos.get('leverage',0)}x, SL = {pos['stop_loss']:.2f}, TP = {pos['take_profit']:.2f})\n"
        )
        if recommendation:
            msg += f"   {recommendation}\n"
    await update.message.reply_text(msg)

async def delete_position(update: Update, context: CallbackContext):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    from config import load_positions
    positions = load_positions()
    if not positions:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    msg = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for i, pos in enumerate(positions, start=1):
        msg += f"{i}. {pos['coin']} {pos['side']} –ø–æ {pos['entry']:.2f}\n"
    context.user_data["awaiting_delete"] = True
    await update.message.reply_text(msg)

async def confirm_delete_position(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É, –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    from config import load_positions, save_positions
    try:
        index = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏!")
        return
    positions = load_positions()
    if index < 1 or index > len(positions):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        pos = positions.pop(index - 1)
        save_positions(positions)
        await update.message.reply_text(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {pos['coin']} {pos['side']} –ø–æ {pos['entry']:.2f} —É–¥–∞–ª–µ–Ω–∞.")
    context.user_data["awaiting_delete"] = False

async def handle_text(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    chat_id = update.message.chat_id
    if context.user_data.get("awaiting_balance"):
        await set_user_balance(update, context)
    elif context.user_data.get("awaiting_delete"):
        await confirm_delete_position(update, context)
    elif chat_id in user_trade_mode:
        await save_user_trade(update, context)
    elif chat_id in position_creation:
        step = position_creation[chat_id]["step"]
        if step == 1:
            await set_position_coin(update, context)
        elif step == 2:
            await set_position_side(update, context)
        elif step == 3:
            await set_position_leverage(update, context)
        elif step == 4:
            await set_position_entry(update, context)

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç –≤ –±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ —Å –Ω–æ–≤—ã–º event loop."""
    from telegram.ext import Application
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"), ask_balance))
    app.add_handler(MessageHandler(filters.Regex("üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å"), show_balance))
    app.add_handler(MessageHandler(filters.Regex("üìä –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"), show_signals))
    app.add_handler(MessageHandler(filters.Regex("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"), show_trades))
    app.add_handler(MessageHandler(filters.Regex("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É"), ask_trade))
    app.add_handler(MessageHandler(filters.Regex("‚ùå –î–æ–±–∞–≤–∏—Ç—å —É–±—ã—Ç–æ—á–Ω—É—é —Å–¥–µ–ª–∫—É"), ask_trade))
    app.add_handler(MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"), add_position))
    app.add_handler(MessageHandler(filters.Regex("üìà –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏"), show_positions))
    app.add_handler(MessageHandler(filters.Regex("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"), delete_position))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    import asyncio
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
