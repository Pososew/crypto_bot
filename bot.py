import time
import multiprocessing
import pandas as pd
import ta
from binance.client import Client
from config import (
    API_KEY, API_SECRET, SYMBOLS,
    save_signal, is_signals_enabled,
    STOP_LOSS_PERCENT, TAKE_PROFIT_PERCENT,
    load_positions, get_trading_mode
)
from telegram_bot import send_telegram_message
from telegram_commands import run_telegram_bot

client = Client(API_KEY, API_SECRET)

def get_data(symbol, interval="1m", lookback=100):
    klines = client.get_klines(symbol=symbol, interval=interval, limit=lookback)
    df = pd.DataFrame(klines, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'number_of_trades',
        'taker_buy_base_volume', 'taker_buy_quote_volume', 'ignore'
    ])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df['open'] = df['open'].astype(float)
    df['high'] = df['high'].astype(float)
    df['low'] = df['low'].astype(float)
    df['close'] = df['close'].astype(float)
    df['volume'] = df['volume'].astype(float)
    return df[['timestamp', 'open', 'high', 'low', 'close', 'volume']]

def apply_indicators(df):
    df['SMA_50'] = df['close'].rolling(window=50).mean()
    df['SMA_200'] = df['close'].rolling(window=200).mean()
    df['RSI'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
    df['ATR'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
    return df

def check_trade_signal_extended(df):
    latest = df.iloc[-1]
    rsi_buy = latest['RSI'] < 30
    rsi_sell = latest['RSI'] > 70

    sma50_buy = latest['close'] > latest['SMA_50']
    sma50_sell = latest['close'] < latest['SMA_50']
    sma200_buy = latest['close'] > latest['SMA_200']
    sma200_sell = latest['close'] < latest['SMA_200']

    avg_volume = df['volume'].rolling(window=20).mean().iloc[-1]
    volume_buy = latest['volume'] > 1.5 * avg_volume
    volume_sell = latest['volume'] > 1.5 * avg_volume

    recent_max = df['close'].rolling(window=20).max().iloc[-1]
    resistance_buy = latest['close'] < 0.98 * recent_max
    resistance_sell = latest['close'] > 0.98 * recent_max

    atr = df['ATR'].iloc[-1]
    atr_ratio = atr / latest['close']
    atr_threshold = 0.01
    atr_condition = (atr_ratio > atr_threshold)

    buy_conditions = sum([rsi_buy, sma50_buy, sma200_buy, volume_buy, resistance_buy, atr_condition])
    sell_conditions = sum([rsi_sell, sma50_sell, sma200_sell, volume_sell, resistance_sell, atr_condition])
    required_confirmations = 3

    if buy_conditions >= required_confirmations:
        return "BUY"
    elif sell_conditions >= required_confirmations:
        return "SELL"
    else:
        return None

def get_timeframe_data(symbol, timeframe, lookback=2):
    klines = client.get_klines(symbol=symbol, interval=timeframe, limit=lookback)
    df = pd.DataFrame(klines, columns=[
        'timestamp','open','high','low','close','volume',
        'close_time','quote_asset_volume','number_of_trades',
        'taker_buy_base_volume','taker_buy_quote_volume','ignore'
    ])
    df['open'] = df['open'].astype(float)
    df['close'] = df['close'].astype(float)
    return df

def start_telegram_bot_in_process():
    run_telegram_bot()

if __name__ == "__main__":
    print("DEBUG: bot.py –∑–∞–ø—É—â–µ–Ω...")
    try:
        print("Ping to Binance:", client.ping())
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ ping:", e)
    
    telegram_process = multiprocessing.Process(target=start_telegram_bot_in_process)
    telegram_process.start()
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    interval_seconds = 300
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º (–Ω–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–≥–¥–∞ 5 –º–∏–Ω—É—Ç)
    from config import get_trading_mode
    mode = get_trading_mode()
    if mode == "scalp":
        timeframe = "15m"
    else:
        timeframe = "1h"
    print(f"DEBUG: –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º: {mode}. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É {timeframe}. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} —Å–µ–∫—É–Ω–¥.")
    
    while True:
        print("DEBUG: –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π...")
        positions = load_positions()
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        if not positions:
            send_telegram_message("–°–µ–π—á–∞—Å –Ω–µ—Ç —Ö–æ—Ä–æ—à–∏—Ö –≤—Ö–æ–¥–æ–≤ –≤ —Å–¥–µ–ª–∫—É üòä")
            print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç–∞—Ö.")
        else:
            # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            found = False
            for symbol in SYMBOLS:
                open_pos = None
                for pos in positions:
                    if pos["coin"].upper() == symbol.upper():
                        open_pos = pos
                        break
                if open_pos:
                    found = True
                    side = open_pos["side"].upper()
                    df_time = get_timeframe_data(symbol, timeframe, lookback=2)
                    last_candle = df_time.iloc[-1]
                    open_price = last_candle['open']
                    close_price = last_candle['close']
                    diff = (close_price - open_price) / open_price
                    reversal = False
                    if side == "SELL" and diff > 0.003:
                        reversal = True
                        msg = f"–°–µ–π—á–∞—Å –ª—É—á—à–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∞—Å—å –≤–≤–µ—Ä—Ö –Ω–∞ –º–æ–Ω–µ—Ç–µ {symbol}."
                    elif side == "BUY" and diff < -0.003:
                        reversal = True
                        msg = f"–°–µ–π—á–∞—Å –ª—É—á—à–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∞—Å—å –≤–Ω–∏–∑ –Ω–∞ –º–æ–Ω–µ—Ç–µ {symbol}."
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–Ω–∞–ª–∏–∑ –º–∞–∫—Å–∏–º—É–º–æ–≤/–º–∏–Ω–∏–º—É–º–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–≤–µ—á–µ–π
                    df_recent = get_timeframe_data(symbol, timeframe, lookback=6)
                    if side == "BUY":
                        max_high = df_recent['high'].max()
                        if (max_high - close_price) / max_high >= 0.003:
                            reversal = True
                            msg = f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ {symbol} –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞. –°–æ–≤–µ—Ç—É—é –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é."
                    else:
                        min_low = df_recent['low'].min()
                        if (close_price - min_low) / min_low >= 0.003:
                            reversal = True
                            msg = f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ {symbol} –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –º–∏–Ω–∏–º—É–º–∞. –°–æ–≤–µ—Ç—É—é –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é."
                    if reversal:
                        send_telegram_message(msg)
                        print(msg)
                    else:
                        print(f"–ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —Å—Ç–∞–±–∏–ª—å–Ω–∞.")
                    break  # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        time.sleep(interval_seconds)
        print("Ping:", client.ping())
